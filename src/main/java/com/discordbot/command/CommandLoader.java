package com.discordbot.command;

import net.dv8tion.jda.core.utils.SimpleLog;
import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;
import org.reflections.scanners.TypeAnnotationsScanner;
import org.reflections.util.ClasspathHelper;
import org.reflections.util.ConfigurationBuilder;
import org.reflections.util.FilterBuilder;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

/**
 * Loads {@link CommandListener}s annotated with {@link Command} from a package.
 */
public class CommandLoader {

    private List<CommandSetting> commandSettings;

    /**
     * @param classPath The classpath of the package to search for {@link CommandListener}s in.
     */
    public CommandLoader(String classPath) {
        Reflections reflections = new Reflections(new ConfigurationBuilder()
                .filterInputsBy(new FilterBuilder().includePackage("com.discordbot"))
                .setUrls(ClasspathHelper.forPackage("com.discordbot"))
                .setScanners(new SubTypesScanner(), new TypeAnnotationsScanner()));

        Set<Class<? extends CommandListener>> subTypes = reflections.getSubTypesOf(CommandListener.class);
        Set<Class<?>> annotated = reflections.getTypesAnnotatedWith(Command.class);

        commandSettings = new ArrayList<>();
        for (Class<? extends CommandListener> c1 : subTypes) {
            for (Class<?> c2 : annotated) {
                if (c1.isAssignableFrom(c2) && c2.isAssignableFrom(c1)) {
                    Command cmd = c2.getAnnotation(Command.class);
                    commandSettings.add(new CommandSetting(c1, cmd.tag(), cmd.enabled()));
                }
            }
        }
    }

    /**
     * Accessor for the {@link List<CommandSetting>} generated by {@link Reflections}.
     *
     * @return the {@link List<CommandSetting>}.
     */
    public List<CommandSetting> getCommandSettings() {
        return Collections.unmodifiableList(commandSettings);
    }

    /**
     * Constructs {@link CommandListener} instances using the classes found by {@link Reflections} constructor.
     *
     * @param commandHandler The {@link CommandHandler} to use for initializing the {@link CommandListener}s. Can be
     *                       <tt>null</tt>.
     * @return a {@link List<CommandListener>} of the {@link CommandListener}s constructed.
     */
    public List<CommandListener> getInstances(CommandHandler commandHandler) {
        List<CommandListener> listeners = new ArrayList<>();
        for (CommandSetting setting : commandSettings) {
            try {
                listeners.add(setting.getCls().getConstructor(CommandHandler.class).newInstance(commandHandler));
            } catch (Exception e) {
                SimpleLog.getLog("CommandLoader").log(e);
            }
        }
        return Collections.unmodifiableList(listeners);
    }

}
